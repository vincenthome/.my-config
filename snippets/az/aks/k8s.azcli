LOC="eastus2"
MRGB="mrgbattlestar"
MCRB="mcrbattlestar"
NOW=$(date '+%y%m%d')
MRG="mrg$NOW"
MAP="map$NOW"
MWA="mwa$NOW"
MKC="mkc-$NOW"
MKC2="mkc2-$NOW"
MKC3="mkc3-$NOW"
MAL="app=angular"
echo $MRGB: $MCRB / $MRG: $MKC $MKC2 $MKC3

# Authentication
az logout
az login
az ad signed-in-user show | jq '.mail' -r

# Resource Group
az group list -o table
az group create -l $LOC -n $MRG

# ***** !!! WARNING DEL RESOURCE GROUP !!! ***********************
# ***** !!! WARNING !!! ******************************************
az group delete -n $MRG --no-wait
# ***** !!! WARNING !!! ******************************************
# ***** !!! WARNING !!! ******************************************



# App Service Plan
az appservice plan list -o table
az appservice plan create -g $MRG -n $MAP --is-linux --sku FREE
az appservice plan create -g $MRG -n $MAP --is-linux --sku P1V2

# Web App
az webapp list -o table
az webapp create -g $MRG -p $MAP -n $MWA -i mcr.microsoft.com/appsvc/staticsite:latest

# Slot
az webapp deployment slot list -g $MRG -n $MWA -o table
az webapp deployment slot create -g $MRG -n $MWA --slot staging



# AKS Azure Kubernetes Service https://docs.microsoft.com/en-us/cli/azure/aks?view=azure-cli-latest
# !important --attach-acr to connect AKS to ACR https://docs.microsoft.com/en-us/azure/aks/cluster-container-registry-integration#create-a-new-aks-cluster-with-acr-integration
az aks list -g $MRG -o table
az aks create -g $MRG -n $MKC --node-count 1 --node-vm-size Standard_B2s --enable-addons monitoring --generate-ssh-keys --attach-acr $MCRB
az aks create -g $MRG -n $MKC2 --node-count 1 --node-vm-size Standard_B2s --enable-addons monitoring --generate-ssh-keys --attach-acr $MCRB
az aks create -g $MRG -n $MKC3 --node-count 1 --node-vm-size Standard_B2s --enable-addons monitoring --generate-ssh-keys --attach-acr $MCRB

# ***** !!! WARNING !!! ******************************************
# ***** !!! WARNING !!! ******************************************
az aks delete -g $MRG -n $MKC
az aks delete -g $MRG -n $MKC2
az aks delete -g $MRG -n $MKC3
# ***** !!! WARNING !!! ******************************************
# ***** !!! WARNING !!! ******************************************

# Bring AKS cluster ssh keys to local ~.ssh
az aks get-credentials -g $MRG -n $MKC
az aks get-credentials -g $MRG -n $MKC2
az aks get-credentials -g $MRG -n $MKC3

# kubectl - under Credentials Context

## NODES
kubectl get nodes -o wide

## PODS
kubectl get pods -o wide
kubectl delete --all pods

POD1=$(kubectl get pods -o json | jq '.items[0].metadata.name' -r)
kubectl describe pod $POD1

### POD SHELL
kubectl exec -it $POD1 -- /bin/sh

# Running individual commands in a container
# https://kubernetes.io/docs/tasks/debug-application-cluster/get-shell-running-container/#running-individual-commands-in-a-container
kubectl exec $POD1 env
kubectl exec $POD1 -- ps aux
kubectl exec $POD1 -- ls /
kubectl exec $POD1 -- ls /usr/share/nginx/html/assets/k8s
kubectl exec $POD1 -- cat /proc/1/mounts
kubectl exec $POD1 -- cat /usr/share/nginx/html/assets/k8s/app.config.json
kubectl exec $POD1 -- cat /usr/share/nginx/html/assets/app.env.json

# Opening a shell when a Pod has more than one container
# https://kubernetes.io/docs/tasks/debug-application-cluster/get-shell-running-container/#opening-a-shell-when-a-pod-has-more-than-one-container
kubectl exec -i -t $POD1 --container nginx -- /bin/sh

## SERVICE
kubectl get services -l $MAL -o wide
wslview http://"$(kubectl get Service -l $MAL -o json | jq '.items[].status.loadBalancer.ingress[].ip' -r)"

# TODO: Learn to use label: a=b  and selector
kubectl logs $POD1
# -f realtime
kubectl logs -f -l $MAL
kubectl logs -f -l $MAL --all-containers

## ConfigMap
kubectl get cm
kubectl describe cm

# Get Public Address
kubectl cluster-info


# ***** !!! ONE TIME !!! ******************************************
az group list -o table
az group create -l $LOC -n $MRGB

az acr list -o table
az acr create -n $MCRB -g $MRGB --sku Basic --admin-enabled true
az acr delete -n $MCRB
# ***** !!! ONE TIME !!! ******************************************


## Apply Yaml
# echo $MCRB.azurecr.io/$IMG:$VER-$NOWHM
# ***** !!! TODO !!! ******************************************
# ***** !!! TODO !!! ******************************************
# ***** update manifest.yaml container -> image /w above path
# kubectl apply -f manifest.yaml

# ***** NON PIPELINE ************************************************
# UPDATE IMAGE NEED NEW TIMESTAMP
IMG=$(jq -r .name package.json)
VER=$(jq -r .version package.json)
NOWHM=$(date '+%y%m%d%H%M')
## ACR Build + Push Image https://docs.microsoft.com/en-us/azure/container-registry/container-registry-quickstart-task-cli
# This Dockerfile - Default to Production
az acr build -r $MCRB -t $IMG:$VER-$NOWHM .
az acr build -r $MCRB -t $IMG:$VER-$NOWHM --build-arg configuration=dev .  

# ACR Repo
# !Important: delete indivdual image by tag not supported/working
az acr repository list -n $MCRB
az acr repository show-tags -n $MCRB --top 10 --orderby time_desc --repository $IMG
az acr repository delete -n $MCRB --repository $IMG
# ***** NON PIPELINE ************************************************


# RARELY USE
# Azure Monitor for containers - https://docs.microsoft.com/en-us/azure/azure-monitor/containers/container-insights-overview
az provider register --namespace Microsoft.OperationsManagement
az provider register --namespace Microsoft.OperationalInsights
az provider show -n Microsoft.OperationsManagement -o table
az provider show -n Microsoft.OperationalInsights -o table



az acr login --name $MCRB --expose-token | jq .accessToken -r | docker login mcrbattlestar.azurecr.io -u 00000000-0000-0000-0000-000000000000 --password-stdin
R=$(docker create $MCRB.azurecr.io/angular:angular_angular_master_20210316.4.binaries)
docker cp $R:/usr/src/app/dist/docker-angular-starter ./archive
